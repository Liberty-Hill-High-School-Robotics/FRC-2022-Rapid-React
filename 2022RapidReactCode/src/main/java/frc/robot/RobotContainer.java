// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {
private NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final RearShooter m_rearShooter = new RearShooter();
    public final Transversal m_transversal = new Transversal();
    public final Lift m_lift = new Lift();
    public final Turret m_turret = new Turret();
    public final Intake m_intake = new Intake();
    public final Flywheel m_flywheel = new Flywheel();
    public final Drive m_drive = new Drive();
    public final Belt m_belt = new Belt();
    public final Other m_other = new Other();

// Joysticks
private final XboxController operatorJoystick = new XboxController(1);
private final Joystick driverJoystick = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private final double TARGET_HEIGHT = 104;
  private final double CAMERA_HEIGHT = 32;
  private final double CAMERA_ANGLE = 50;
  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {



    //below, the drivetime smartdashboard should be:     SmartDashboard.putData("DriveTime", new DriveTime(2.5, -.25));

        
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    
   // SmartDashboard.putData("DriveTime", new DriveTime( m_drive ));
   // SmartDashboard.putData("SimpleAuton", new SimpleAuton());

    
    SmartDashboard.putData("RotateToHeadingCommand", new RotateToHeadingCommand( 45, m_drive ));
    SmartDashboard.putData("DriveArcade", new DriveArcade( m_drive ));

    // INTAKE
    SmartDashboard.putData("IntakeInCommand", new IntakeInCommand( m_intake ));
    SmartDashboard.putData("IntakeOutCommand", new IntakeOutCommand( m_intake ));
    SmartDashboard.putData("IntakeToFull", new IntakeToFull( m_intake ));

    // CONVEYOR
    SmartDashboard.putData("BeltUpCommand", new BeltUpCommand(m_belt));
    SmartDashboard.putData("BeltDownCommand", new BeltDownCommand( m_belt ));
    SmartDashboard.putData("BeltToFull", new BeltToFull( m_belt ));
    SmartDashboard.putData("BeltIncrementVelocity", new beltTestIncrement(m_belt));
    SmartDashboard.putData("BeltDecrementVelocity", new beltTestDecrement(m_belt));
    SmartDashboard.putData("BeltTESTPrecentOutput", new beltTestPrecentOutput(m_belt));

    // TURRET
    SmartDashboard.putData("TurretRight", new TurretRight( m_turret ));
    SmartDashboard.putData("TurretLeft", new TurretLeft( m_turret ));
    SmartDashboard.putData("TurretAutoAim", new TurretAutoAim( m_turret ));

    // SHOOTER FRONT
    SmartDashboard.putData("FlywheelOutCommand", new FlywheelOutCommand( m_flywheel ));
    SmartDashboard.putData("FlywheelInCommand", new FlywheelInCommand( m_flywheel ));
    SmartDashboard.putData("FrontShooterSlider", new ShooterSlider( m_flywheel ));
    SmartDashboard.putData("FrontIncrementVelocity", new FlywheelTestIncrement(m_flywheel));
    SmartDashboard.putData("FrontDecrementVelocity", new FlywheelTESTDecrement(m_flywheel));
    SmartDashboard.putData("FrontVelocity", new FlywheelTESTVelocity(m_flywheel));
  

    // SHOOTER REAR
    SmartDashboard.putData("RearShooterOut", new RearShooterOut( m_rearShooter ));
    SmartDashboard.putData("RearShooterIn", new RearShooterIn( m_rearShooter ));
    SmartDashboard.putData("RearShooterSlider", new RearShooterSlider( m_rearShooter ));
    SmartDashboard.putData("RearIncrementVelocity", new RearShooterTESTIncrement(m_rearShooter));
    SmartDashboard.putData("RearDecrementVelocity", new RearShooterTESTDecrement(m_rearShooter));
    SmartDashboard.putData("RearVelocity", new RearShooterTESTVelocity(m_rearShooter));

    // LIFT
    SmartDashboard.putData("LiftStartUp", new LiftStartUp( m_lift ));
    SmartDashboard.putData("LiftStartDown", new LiftStartDown( m_lift ));

    // TRAVERSE
    SmartDashboard.putData("TransversalForward", new TransversalForward( m_transversal ));
    SmartDashboard.putData("TransversalBack", new TransversalBack( m_transversal ));

    // GROUP
    SmartDashboard.putData("PrepareToShoot", new PrepareToShoot(m_turret, m_flywheel, m_rearShooter));


    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_drive.setDefaultCommand(new DriveArcade( m_drive ) );


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        

    m_chooser.addOption("SimpleAuton", new SimpleAuton(m_turret, m_flywheel, m_rearShooter, m_belt, m_drive));
    //m_chooser.setDefaultOption("$command.getName()", new ${name.replace(' ', '')}( m_${name.substring(0,1).toLowerCase()}${name.substring(1).replace(' ', '')} ));

    

        SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }
  
  /*
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton precissionButton = new JoystickButton(driverJoystick, 2);        
precissionButton.whileHeld(new drivePrecission( m_drive ) ,true);
    SmartDashboard.putData("precissionButton",new drivePrecission( m_drive ) );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getdriverJoystick() {
        return driverJoystick;
    }

public XboxController getoperatorJoystick() {
      return operatorJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
 // public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
   // return m_chooser.getSelected();
 // }

  public boolean getTv(){
    NetworkTableEntry tv = table.getEntry("tv");
    return tv.getBoolean(false);
  }

  public double getTx(){
    NetworkTableEntry tx = table.getEntry("tx");
    return tx.getDouble(0);
  }

  public double getTy(){
    NetworkTableEntry ty = table.getEntry("ty");
    return ty.getDouble(0);
  }

  public double getTa(){
    NetworkTableEntry ta = table.getEntry("ta");
    return ta.getDouble(0);
  }


  public double getDistance(){
    double distance = (TARGET_HEIGHT - CAMERA_HEIGHT) / (CAMERA_ANGLE + getTy());
    return distance;
  }
  

}

