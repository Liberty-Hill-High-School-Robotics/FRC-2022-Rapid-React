// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

// ***********************************************************************************************
// * 2/28/2022 Remove all AUTO-GENERATE COMMENTS
// ***********************************************************************************************

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
import frc.robot.RobotContainer;
import frc.robot.subsystems.Belt;
import frc.robot.subsystems.Flywheel;
import frc.robot.subsystems.RearShooter;

/**
 * MODIFIED VERSION OF BeltUpSpeed used to Shoot that shoots 1 ball and waits
 * for flywheels to get back to speed before shooting next
 * 
 * Starting State:  Ball in Conveyor (may or may not have ball in intake)
 * 
 * If both shooters are ready, move conveyor up
 *    -- wait for conveyor not full
 *    -- wait for conveyor full then stop
 */
public class BeltShootOne extends CommandBase {

    private final Belt m_belt;
    private Constants.ShootingConstants.ShootingPosition m_position;
    private Flywheel m_Flywheel;
    private RearShooter m_RearShooter;
    private boolean firstTime;
    private boolean waitForEmpty;

    public BeltShootOne(Belt subsystem, Constants.ShootingConstants.ShootingPosition position) {
        m_belt = subsystem;
        addRequirements(m_belt);

        m_position = position;

        m_Flywheel = RobotContainer.getInstance().m_flywheel;
        m_RearShooter = RobotContainer.getInstance().m_rearShooter;
        firstTime = true;
        waitForEmpty = true;
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        // m_belt.beltUpSpeed(m_position);
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        if (!m_belt.isBallInConveyor()) waitForEmpty = false;
        if (firstTime) {
            // assume ball was in the conveyor and both flywheels are at speed
            m_belt.beltUpSpeed(m_position);
            firstTime = false;
        }
        else {
            if (waitForEmpty) {
                // 1st ball isn't gone yet -- keep running
                m_belt.beltUpSpeed(m_position);
            }
            else {
                if (m_belt.isBallInConveyor()) {
                    // Pause for flywheels
                    if (m_Flywheel.isFlywheelAtVelocity() &&
                        m_RearShooter.isFlywheelAtVelocity()) {
                            m_belt.beltUpSpeed(m_position);
                            waitForEmpty = true;
                        }
                    else{
                            m_belt.beltStop();
                        }
                }
                else {
                    // Ball hasn't reached conveyor keep running
                    m_belt.beltUpSpeed(m_position);
                }
            }
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        // m_belt.beltStop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return true;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
