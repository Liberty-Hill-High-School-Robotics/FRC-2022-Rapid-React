// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

// ***********************************************************************************************
// * 2/28/2022 Remove all AUTO-GENERATE COMMENTS
// ***********************************************************************************************


package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.DigitalInput;

/**
 *
 */
public class Intake extends SubsystemBase {
    private final double INTAKE_POWER = .25;
    
    private WPI_VictorSPX victorSPXIntake;
    private DigitalInput intakeLimitOne;

    /**
    *
    */
    public Intake() {
        victorSPXIntake = new WPI_VictorSPX(1);
        victorSPXIntake.configFactoryDefault();
        victorSPXIntake.setInverted(false);
        
        intakeLimitOne = new DigitalInput(0);
        addChild("intakeLimitOne", intakeLimitOne);
     }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putBoolean("posOneLimit", isBallInIntake());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation
    }

    // Put methods for controlling this subsystem here. Call these from Commands.
    
    public void intakeStartIn() {
        victorSPXIntake.set(INTAKE_POWER);
    }

    public void intakeStartOut() {
        victorSPXIntake.set(-INTAKE_POWER);
    }
    public void intakeStop() {
        victorSPXIntake.stopMotor();
    }
    
    public boolean  isBallInIntake() {
        // FRIDGE Switch is Normally CLOSED
        return !intakeLimitOne.get();
    }
}

