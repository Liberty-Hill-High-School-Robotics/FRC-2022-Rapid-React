// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX talonSRXL;
private WPI_VictorSPX victorSPXL;
private MotorControllerGroup driveLeft;
private WPI_TalonSRX talonSRXR;
private WPI_VictorSPX victorSPXR;
private MotorControllerGroup driveRight;
private DifferentialDrive driveMain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
talonSRXL = new WPI_TalonSRX(4);
 
 

victorSPXL = new WPI_VictorSPX(5);
 
 

driveLeft = new MotorControllerGroup(talonSRXL, victorSPXL  );
 addChild("driveLeft",driveLeft);
 

talonSRXR = new WPI_TalonSRX(2);
 
 

victorSPXR = new WPI_VictorSPX(3);
 
 

driveRight = new MotorControllerGroup(talonSRXR, victorSPXR  );
 addChild("driveRight",driveRight);
 

driveMain = new DifferentialDrive(driveLeft, driveRight);
 addChild("driveMain",driveMain);
 driveMain.setSafetyEnabled(true);
driveMain.setExpiration(0.1);
driveMain.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void DriveArcade(double speed, double rotation) {
        driveMain.arcadeDrive(speed, rotation);
    }
    

}

