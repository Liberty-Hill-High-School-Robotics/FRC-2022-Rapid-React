// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMVictorSPX driveLeftBack;
private PWMVictorSPX driveLeftFront;
private MotorControllerGroup driveLeft;
private PWMVictorSPX driveRightBack;
private PWMVictorSPX driveRightFront;
private MotorControllerGroup driveRight;
private DifferentialDrive driveMain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
driveLeftBack = new PWMVictorSPX(3);
 addChild("driveLeftBack",driveLeftBack);
 driveLeftBack.setInverted(false);

driveLeftFront = new PWMVictorSPX(4);
 addChild("driveLeftFront",driveLeftFront);
 driveLeftFront.setInverted(false);

driveLeft = new MotorControllerGroup(driveLeftBack, driveLeftFront  );
 addChild("driveLeft",driveLeft);
 

driveRightBack = new PWMVictorSPX(1);
 addChild("driveRightBack",driveRightBack);
 driveRightBack.setInverted(true);

driveRightFront = new PWMVictorSPX(2);
 addChild("driveRightFront",driveRightFront);
 driveRightFront.setInverted(true);

driveRight = new MotorControllerGroup(driveRightBack, driveRightFront  );
 addChild("driveRight",driveRight);
 

driveMain = new DifferentialDrive(driveLeft, driveRight);
 addChild("driveMain",driveMain);
 driveMain.setSafetyEnabled(true);
driveMain.setExpiration(0.1);
driveMain.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void DriveArcade(double speed, double rotation) {
        driveMain.arcadeDrive(speed, rotation);
    }
    

}

