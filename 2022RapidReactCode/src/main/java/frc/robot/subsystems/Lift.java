// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

// ***********************************************************************************************
// * 2/28/2022 Remove all AUTO-GENERATE COMMENTS
// ***********************************************************************************************

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax.SoftLimitDirection;
import com.revrobotics.CANSparkMax; 
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.SparkMaxLimitSwitch.Type;

/**
 *
 */
public class Lift extends SubsystemBase {
    private final double POWER_LIFT = .1;
    
    private RelativeEncoder m_encoder;
    private CANSparkMax canSparkMAXLift;

    /**
    *
    */
    public Lift() {
        canSparkMAXLift = new CANSparkMax(8, MotorType.kBrushless);
        canSparkMAXLift.setIdleMode(IdleMode.kBrake);
        m_encoder = canSparkMAXLift.getEncoder();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("liftPosition", m_encoder.getPosition());
        SmartDashboard.putBoolean("LiftForwardLimit", canSparkMAXLift.getForwardLimitSwitch(Type.kNormallyOpen).isPressed());
        SmartDashboard.putBoolean("LiftReverseLimit", canSparkMAXLift.getReverseLimitSwitch(Type.kNormallyOpen).isPressed());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation
    }

    // Put methods for controlling this subsystem here. Call these from Commands.

    public void liftStartUp(){
        if (!isLiftLocked()) canSparkMAXLift.set(POWER_LIFT);
    }

    public void liftStartDown(){
        canSparkMAXLift.set(-POWER_LIFT);
    }

    public void liftStop(){
        canSparkMAXLift.stopMotor();
    }

    public boolean isLiftLocked() {
        return canSparkMAXLift.getReverseLimitSwitch(Type.kNormallyOpen).isPressed();
    }

    public boolean isLiftAtTop(){
        return canSparkMAXLift.getForwardLimitSwitch(Type.kNormallyOpen).isPressed();
    }

}

