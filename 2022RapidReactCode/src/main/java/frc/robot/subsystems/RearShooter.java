// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax; 
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxPIDController;
/**
 *
 */
public class RearShooter extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private final double MAX_SHOOTER_VELOCITY = 5700;
    private double CURRENT_SHOOTER_VELOCITY = 0.0;

private final double REAR_POWER = .3;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax canSparkMAXRearShooter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
     private SparkMaxPIDController m_pidController;
     private RelativeEncoder m_encoder;

    /**
    *
    */
    public RearShooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
canSparkMAXRearShooter = new CANSparkMax(14, MotorType.kBrushless);
 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    m_pidController = canSparkMAXRearShooter.getPIDController();
    m_encoder = canSparkMAXRearShooter.getEncoder();
    m_pidController.setP(6e-5);
    m_pidController.setI(0);
    m_pidController.setD(0);
    m_pidController.setIZone(0);
    m_pidController.setFF(0.000015);
    m_pidController.setOutputRange(-1, 1);
    
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("RearRequestVelocity", CURRENT_SHOOTER_VELOCITY);
        SmartDashboard.putNumber("RearVelocity", m_encoder.getVelocity());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void RearShooterOut(){
        canSparkMAXRearShooter.set(REAR_POWER);
        }
    
        public void RearShooterIn(){
            canSparkMAXRearShooter.set(-REAR_POWER);
        }
    
        public void RearShooterStop(){
            canSparkMAXRearShooter.stopMotor();

        }

        public void RearShooterOutPower (double power) {
        //talonFXShooter1.set(ControlMode.Velocity, MAX_SHOOTER_VELOCITY * power);
       //talonFXShooter1.set(TalonFXControlMode.Velocity, MAX_SHOOTER_VELOCITY * power);
      canSparkMAXRearShooter.set(power);
      SmartDashboard.putNumber("powerRear", power);
    }


    // All methods below this comment are for TESTING ONLY
    public void incrementShooterVelocity() {
        CURRENT_SHOOTER_VELOCITY = CURRENT_SHOOTER_VELOCITY + 475;
        if (CURRENT_SHOOTER_VELOCITY > MAX_SHOOTER_VELOCITY) CURRENT_SHOOTER_VELOCITY = MAX_SHOOTER_VELOCITY;
    }

    public void decrementShooterVelocity() {
        CURRENT_SHOOTER_VELOCITY = CURRENT_SHOOTER_VELOCITY - 475;
        if (CURRENT_SHOOTER_VELOCITY < 0) CURRENT_SHOOTER_VELOCITY = 0;
    }

    public void testVelocity() {
        m_pidController.setReference(CURRENT_SHOOTER_VELOCITY, CANSparkMax.ControlType.kVelocity);
    }
}

